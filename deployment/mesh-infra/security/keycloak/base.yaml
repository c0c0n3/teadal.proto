apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: keycloak

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:21.1.2
        args:
        - start
        - --import-realm
        env:
        # Use HTTP (we'll switch to HTTPs later on for pilot deployments)
        # and build URLs of depending on host and port found in the request.
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HTTP_RELATIVE_PATH
          value: /keycloak/
        - name: KC_HOSTNAME_STRICT
          value: "false"

        # NOTE this initial admin can only be used on first boot.
        # In fact, Keycloak will create it in its DB only if it isn't
        # there already. So the second time this pod restarts the user
        # will be there and changing the password through the below env
        # var will have no effect---you'll have to log onto Keycloak to
        # change it. This is why we're not asking Reloader to monitor
        # changes to this pod's linked secret.
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-builtin-admin
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-builtin-admin
              key: password
        ports:
        - name: http
          containerPort: 8080
        # - name: https
        #   containerPort: 8443
        readinessProbe:
          httpGet:
            path: /keycloak/realms/master
            port: 8080
        volumeMounts:
        - name: h2-volume
          mountPath: /opt/keycloak/data/h2/
        - name: teadal-realm-bootstrap
          mountPath: /opt/keycloak/data/import/teadal-bootstrap.json
          subPath: teadal-bootstrap.json
      volumes:
      - name: h2-volume
        persistentVolumeClaim:
          claimName: keycloak-pvc
      - name: teadal-realm-bootstrap
        configMap:
          name: teadal-realm-bootstrap

# NOTE
# ----
# 1. Resetting Keycloak. Since we import the Teadal realm on startup,
# you can just zap the contents of the DB directory to start again
# from a clean slate. Obviously, this is only an option when testing,
# not in a prod scenario! Anyhoo, if you really want to do this, then
# you can follow a procedure similar to the one below.
#
# $ kubectl scale --replicas=0 deployment/keycloak
# $ kubectl get pv | grep keycloak | cut -f1 -d' ' \
#                  | xargs -n1 kubectl describe pv | grep Path:
#     Path:  /data/d1
# $ ssh -p 10022 admin@localhost
# $ ls /data/d1/
#     keycloakdb.lock.db  keycloakdb.mv.db  keycloakdb.trace.db
# $ rm /data/d1/key*
# $ exit
# $ kubectl scale --replicas=1 deployment/keycloak
#
# 2. Teadal realm export. Here's how.
#
# $ kustomize build mesh-infra/security/keycloak/ | kubectl delete -f -
# $ emacs mesh-infra/security/keycloak/base.yaml
#     replace container args with the following:
#         - export
#         - --realm
#         - teadal
#         - --users
#         - realm_file
#         - --file
#         - /opt/keycloak/data/h2/teadal-bootstrap.json
# $ kustomize build mesh-infra/security/keycloak/ | kubectl apply -f -
# $ kubectl get pod    # wait until export done
# $ kubectl get pv | grep keycloak | cut -f1 -d' ' \
#                  | xargs -n1 kubectl describe pv | grep Path:
#     Path:  /data/d1
# $ scp -P 10022 \
#     admin@localhost:/data/d1/teadal-bootstrap.json \
#     mesh-infra/security/keycloak/teadal-bootstrap.json
# # ^ can't use `kubectl cp` b/c there's no `tar` in Keycloak image.
# $ emacs mesh-infra/security/keycloak/base.yaml
#     put back original container args
# $ kustomize build mesh-infra/security/keycloak/ | kubectl apply -f -
#
# 3. Teadal realm from scratch. To recreate the Teadal realm from
# scratch, you should
# - Redeploy Keycloak to make it start w/o realm import.
# - Reset Keycloak---see note above about it.
# - Create & populate the Teadal realm.
# - Export the realm---see note above about it.
# - Reset Keycloak.
# - Redeploy Keycloak to make it start w/ realm import as usual.
#
# Here's how to create and populate the Teadal realm.
# - Browse to the admin console and log in with the admin username
#   and password you set in the Keycloak K8s secret.
# - Create a new realm called `teadal` and switch to that realm.
# - Create two users, `jeejee@teadal.eu` (=email, username: `jeejee`)
#   and `sebs@teadal.eu` (=email, username: `sebs`), both having log-in
#   enabled and a (non-temp) password of `abc123`. Take care of turning
#   on the "Email verified" option for both users.
# - Create a group called `monitor` and make `jeejee@teadal.eu`
#   a member of that group.
# - Edit the built-in `profile` client scope to add a "Group Membership"
#   mapper---select the "By configuration" option after hitting the add
#   add button. Set the "Token Claim Name" to `roles` and take care to
#   turn on the "Add to access token" option.
#   See:
#   - https://stackoverflow.com/questions/76919561
#   - https://i.sstatic.net/8wjyX.png
#